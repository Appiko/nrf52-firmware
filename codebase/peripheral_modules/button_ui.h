/**
 *  button_ui.h : Button UI Event Generator
 *  Copyright (C) 2019  Appiko
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef CODEBASE_PERIPHERAL_MODULES_BUTTON_UI_H_
#define CODEBASE_PERIPHERAL_MODULES_BUTTON_UI_H_

/**
 * @addtogroup group_peripheral_modules
 * @{
 *
 * @defgroup group_button_ui Button UI event generator
 *
 * @brief Driver for the generating all the button related UI events
 *  for the application.
 *
 * @{
 */


#include "stdint.h"
#include "stdbool.h"
#include "ms_timer.h"

/**
 * Enum defining the type of actions possible with buttons
 */
typedef enum
{
    BUTTON_UI_ACT_CROSS, //!< When a button press crosses a particular time
    BUTTON_UI_ACT_RELEASE//!< When a button is released
}button_ui_action;

/**
 * Enum to define the different kinds of button presses
 */
typedef enum
{
    BUTTON_UI_STEP_QUICK,//!< For a short button press
    BUTTON_UI_STEP_SHORT,//!< For a short button press
    BUTTON_UI_STEP_LONG, //!< For a long button press
    BUTTON_UI_STEP_WAKE, //!< For the moment a button is pressed
}button_ui_steps;

/**
 * An array defining the time duration in ms for the different
 *  kinds of button press defined in @ref button_ui_steps.
 *
 * @note @ref BUTTON_UI_STEP_WAKE does not have a duration
 */
const static uint32_t press_duration[] = {
    MS_TIMER_TICKS_MS(100),
    MS_TIMER_TICKS_MS(5000),
    MS_TIMER_TICKS_MS(15000),
    0xFFFFFFFF  ///This should never be reached
};

/**
 * @brief Initialize the button ui event generator module
 * @param button_pin Button Pin number to monitor
 * @param irq_priority IRQ priority of the GPIOTE irq used
 * @param button_ui_handler Handler to be called for all the button events
 */
void button_ui_init(uint32_t button_pin, uint32_t irq_priority,
        void (*button_ui_handler)(button_ui_steps step, button_ui_action act));
/**
 * @brief The ticks that need to be sent to the button UI module
 *  for its processing
 * @param ui_ticks UI ticks generated by next interval handler
 */
void button_ui_add_tick(uint32_t ui_ticks);

/**
 * @brief To enable/disable the button UI GPIOTE IRQ
 * @param set_wake_on Set to true to enable and false to disable
 */
void button_ui_config_wake(bool set_wake_on);

#endif /* CODEBASE_PERIPHERAL_MODULES_BUTTON_UI_H_ */

/**
 * @}
 * @}
 */
